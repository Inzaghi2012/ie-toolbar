/**
* Facebook Internet Explorer Toolbar Software License 
* Copyright (c) 2009 Facebook, Inc. 
*
* Permission is hereby granted, free of charge, to any person or organization
* obtaining a copy of the software and accompanying documentation covered by
* this license (which, together with any graphical images included with such
* software, are collectively referred to below as the "Software") to (a) use,
* reproduce, display, distribute, execute, and transmit the Software, (b)
* prepare derivative works of the Software (excluding any graphical images
* included with the Software, which may not be modified or altered), and (c)
* permit third-parties to whom the Software is furnished to do so, all
* subject to the following:
*
* The copyright notices in the Software and this entire statement, including
* the above license grant, this restriction and the following disclaimer,
* must be included in all copies of the Software, in whole or in part, and
* all derivative works of the Software, unless such copies or derivative
* works are solely in the form of machine-executable object code generated by
* a source language processor.  
*
* Facebook, Inc. retains ownership of the Software and all associated
* intellectual property rights.  All rights not expressly granted in this
* license are reserved by Facebook, Inc.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
* SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
* FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
* ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/ 

#include "StdAfx.h"

#include "ToolbarSettingsDlg.h"

#include "UpdateUrlDlg.h"

#include "../../data/ToolbarSettings.h"

#include "../../common/CommonConstants.h"
#include "../../common/ResourceMessages.h"

#include "../../util/BitsUtils.h"

namespace facebook{

// ---------------------------------------------------------------------
// class ToolbarSettingsDlg
// ---------------------------------------------------------------------


IMPLEMENT_DYNAMIC(ToolbarSettingsDlg, CDialog)


BEGIN_MESSAGE_MAP(ToolbarSettingsDlg, CDialog)
   ON_BN_CLICKED(IDOK, &ToolbarSettingsDlg::OnBtnOk)
END_MESSAGE_MAP()


ToolbarSettingsDlg::ToolbarSettingsDlg(CWnd* pParent /*=NULL*/)
  : CDialog(ToolbarSettingsDlg::IDD, pParent)
   , newFriendRequest_(FALSE)
   , newMessage_(FALSE)
   , newPoke_(FALSE)
   , newFriend_(FALSE)
   , newEventInvite_(FALSE)
   , newShare_(FALSE)
   , smoneWroteWall_(FALSE)
   , afuProfile_(FALSE)
   , afuStatus_(FALSE)
   , afuAlbums_(FALSE)
   , afuWall_(FALSE)
   , afwNote_(FALSE)
   , popupNotification_(FALSE)
   , groupInv_(FALSE)
   , checkUpdates_(FALSE) {
     ResourceMessages::subscribeObserver(this);
}

ToolbarSettingsDlg::~ToolbarSettingsDlg() {
  ResourceMessages::unsubscribeObserver(this);
}

void ToolbarSettingsDlg::DoDataExchange(CDataExchange* pDX) {
   CDialog::DoDataExchange(pDX);
   DDX_Check(pDX, IDC_CHK_NFRIEND_REQ, newFriendRequest_);
   DDX_Check(pDX, IDC_CHK_NMESSAGE, newMessage_);
   DDX_Check(pDX, IDC_CHK_NPOKE, newPoke_);
   DDX_Check(pDX, IDC_CHK_NFRIEND, newFriend_);
   DDX_Check(pDX, IDC_CHK_NEVENT_INV, newEventInvite_);
   DDX_Check(pDX, IDC_CHK_NSHARE, newShare_);
   DDX_Check(pDX, IDC_CHK_SWROTE_WALL, smoneWroteWall_);
   DDX_Check(pDX, IDC_CHK_AFU_PROFILE, afuProfile_);
   DDX_Check(pDX, IDC_CHK_AFU_STATUS, afuStatus_);
   DDX_Check(pDX, IDC_CHK_AFU_ALBUMS, afuAlbums_);
   DDX_Check(pDX, IDC_CHK_AFU_WALL, afuWall_);
   DDX_Check(pDX, IDC_CHK_AF_NOTE, afwNote_);
   DDX_Check(pDX, IDC_CHK_POPUP_NOTIF, popupNotification_);
   DDX_Check(pDX, IDC_CHK_GROUP_INV, groupInv_);
   DDX_Check(pDX, IDC_CHK_UPDATES, checkUpdates_);
}


BOOL ToolbarSettingsDlg::OnInitDialog() {
   loadData();
   CRect rect;
   GetWindowRect(&rect);
   setWindowSize();
   setControlsSize(rect);
   setButtonsPos();
   updateView(0);
   return CDialog::OnInitDialog();
}

void ToolbarSettingsDlg::updateView(int changeId) {
  UNREFERENCED_PARAMETER(changeId);

  SetWindowText(ResourceMessages::getMessage(kSettingsConfigureTheFacebookToolbar).c_str());

  SetDlgItemText(IDC_CHK_POPUP_NOTIF, ResourceMessages::getMessage(kSettingsEnablePopUpNotification).c_str());
  SetDlgItemText(IDC_STATIC_GR1, ResourceMessages::getMessage(kSettingsNotificationAboutMe).c_str());
  SetDlgItemText(IDC_CHK_NFRIEND_REQ, ResourceMessages::getMessage(kSettingsNewFriendRequest).c_str());
  SetDlgItemText(IDC_CHK_NMESSAGE, ResourceMessages::getMessage(kSettingsNewMessage).c_str());
  SetDlgItemText(IDC_CHK_NPOKE, ResourceMessages::getMessage(kSettingsNewPoke).c_str());
  SetDlgItemText(IDC_CHK_NFRIEND, ResourceMessages::getMessage(kSettingsNewFriend).c_str());
  SetDlgItemText(IDC_CHK_NEVENT_INV, ResourceMessages::getMessage(kSettingsNewEventInvite).c_str());
  SetDlgItemText(IDC_CHK_GROUP_INV, ResourceMessages::getMessage(kSettingsNewGroupInvite).c_str());
  SetDlgItemText(IDC_CHK_NSHARE, ResourceMessages::getMessage(kSettingsNewShare).c_str());
  SetDlgItemText(IDC_CHK_SWROTE_WALL, ResourceMessages::getMessage(kSettingsSomeoneWroteOnYourWall).c_str());
  SetDlgItemText(IDC_STATIC_GR2, ResourceMessages::getMessage(kSettingsNotificationAboutMyFriends).c_str());
  SetDlgItemText(IDC_CHK_AFU_PROFILE, ResourceMessages::getMessage(kSettingsAFriendUpdatedHisHerProfile).c_str());
  SetDlgItemText(IDC_CHK_AFU_STATUS, ResourceMessages::getMessage(kSettingsAFriendUpdatedHisHerStatus).c_str());
  SetDlgItemText(IDC_CHK_AFU_ALBUMS, ResourceMessages::getMessage(kSettingsAFriendUpdatedHisHerAlbums).c_str());
  SetDlgItemText(IDC_CHK_AFU_WALL, ResourceMessages::getMessage(kSettingsAFriendUpdatedHisHerWall).c_str());
  SetDlgItemText(IDC_CHK_AF_NOTE, ResourceMessages::getMessage(kSettingsAFriendWroteANote).c_str());
  SetDlgItemText(IDC_CHK_UPDATES, ResourceMessages::getMessage(kSettingsCheckForUpdates).c_str());
  SetDlgItemText(IDOK, ResourceMessages::getMessage(kButtonOk).c_str());
  SetDlgItemText(IDCANCEL, ResourceMessages::getMessage(kButtonCancel).c_str());

  loadUpdatesStatus();
}

void ToolbarSettingsDlg::setWindowSize() {
  SIZE textSize;
  HFONT windowFont = (HFONT)::SendMessage(GetSafeHwnd(), WM_GETFONT, 0, 0);
  HDC context = ::GetDC(GetSafeHwnd());
  SelectObject(context, windowFont);

  std::list<String> messages;
  messages.push_back(ResourceMessages::getMessage(kSettingsEnablePopUpNotification));
  messages.push_back(ResourceMessages::getMessage(kSettingsNotificationAboutMe));
  messages.push_back(ResourceMessages::getMessage(kSettingsNewFriendRequest));
  messages.push_back(ResourceMessages::getMessage(kSettingsNewMessage));
  messages.push_back(ResourceMessages::getMessage(kSettingsNewPoke));
  messages.push_back(ResourceMessages::getMessage(kSettingsNewFriend));
  messages.push_back(ResourceMessages::getMessage(kSettingsNewEventInvite));
  messages.push_back(ResourceMessages::getMessage(kSettingsNewGroupInvite));
  messages.push_back(ResourceMessages::getMessage(kSettingsNewShare));
  messages.push_back(ResourceMessages::getMessage(kSettingsSomeoneWroteOnYourWall));
  messages.push_back(ResourceMessages::getMessage(kSettingsNotificationAboutMyFriends));
  messages.push_back(ResourceMessages::getMessage(kSettingsAFriendUpdatedHisHerProfile));
  messages.push_back(ResourceMessages::getMessage(kSettingsAFriendUpdatedHisHerStatus));
  messages.push_back(ResourceMessages::getMessage(kSettingsAFriendUpdatedHisHerAlbums));
  messages.push_back(ResourceMessages::getMessage(kSettingsAFriendUpdatedHisHerWall));
  messages.push_back(ResourceMessages::getMessage(kSettingsAFriendWroteANote));
  messages.push_back(ResourceMessages::getMessage(kSettingsCheckForUpdates));
  messages.push_back(ResourceMessages::getMessage(kButtonOk) +
    ResourceMessages::getMessage(kButtonCancel));

  int maxLength = 0; 
  for (std::list<String>::iterator it = messages.begin(); it != messages.end(); it++) {
    GetTextExtentPoint32(context, (*it).c_str(), (*it).length(), &textSize);
    if (textSize.cx > maxLength) {
      maxLength = textSize.cx;
    }
  }

  CRect rect;
  GetWindowRect(&rect);
  const int additionWidth = 122; // Additional width for dialog
  const int minWidth = 298; // Minimum window width
  if (maxLength + additionWidth > minWidth) {
    SetWindowPos(0, 0, 0, maxLength + additionWidth, rect.Height(), SWP_NOZORDER | SWP_NOMOVE);
  }
}

void ToolbarSettingsDlg::setControlsSize(CRect oldWindowSize) {
  std::list<CWnd*> controls;
  controls.push_back(GetDlgItem(IDC_CHK_POPUP_NOTIF));
  controls.push_back(GetDlgItem(IDC_STATIC_GR1));
  controls.push_back(GetDlgItem(IDC_CHK_NFRIEND_REQ));
  controls.push_back(GetDlgItem(IDC_CHK_NMESSAGE));
  controls.push_back(GetDlgItem(IDC_CHK_NPOKE));
  controls.push_back(GetDlgItem(IDC_CHK_NFRIEND));
  controls.push_back(GetDlgItem(IDC_CHK_NEVENT_INV));
  controls.push_back(GetDlgItem(IDC_CHK_GROUP_INV));
  controls.push_back(GetDlgItem(IDC_CHK_NSHARE));
  controls.push_back(GetDlgItem(IDC_CHK_SWROTE_WALL));
  controls.push_back(GetDlgItem(IDC_STATIC_GR2));
  controls.push_back(GetDlgItem(IDC_CHK_AFU_PROFILE));
  controls.push_back(GetDlgItem(IDC_CHK_AFU_STATUS));
  controls.push_back(GetDlgItem(IDC_CHK_AFU_ALBUMS));
  controls.push_back(GetDlgItem(IDC_CHK_AFU_WALL));
  controls.push_back(GetDlgItem(IDC_CHK_AF_NOTE));
  controls.push_back(GetDlgItem(IDC_CHK_UPDATES));

  CRect controlRect;
  CRect windowRect;
  GetWindowRect(&windowRect);
  int additionWidth = windowRect.Width() - oldWindowSize.Width() - 2;
  for (std::list<CWnd*>::iterator it = controls.begin(); it != controls.end(); it++) {
    (*it)->GetWindowRect(&controlRect);
    ScreenToClient(&controlRect);
    (*it)->MoveWindow(controlRect.left, controlRect.top, 
      controlRect.Width() + additionWidth, controlRect.Height(), TRUE);
  }
}

void ToolbarSettingsDlg::setButtonsPos() {
  const int textMargin = 20; // Button text margin
  const int btnPadding = 15; // Button padding
  
  SIZE textSize;
  HFONT windowFont = (HFONT)::SendMessage(GetSafeHwnd(), WM_GETFONT, 0, 0);
  HDC context = ::GetDC(GetSafeHwnd());
  SelectObject(context, windowFont);

  CRect windowRect;
  GetWindowRect(&windowRect);

  // Set Cancel Button
  String message = ResourceMessages::getMessage(kButtonCancel);
  GetTextExtentPoint32(context, message.c_str(), message.length(), &textSize);

  int buttonWidth = textSize.cx + 2 * textMargin;
  int cancelButtonX = windowRect.Width() - btnPadding - buttonWidth;
  moveButton(IDCANCEL, buttonWidth, cancelButtonX);

  // Set Ok Button
  message = ResourceMessages::getMessage(kButtonOk);
  GetTextExtentPoint32(context, message.c_str(), message.length(), &textSize);

  buttonWidth = textSize.cx + 2 * textMargin;
  int okButtonX = cancelButtonX - btnPadding / 2 - buttonWidth;
  moveButton(IDOK, buttonWidth, okButtonX);
}

void ToolbarSettingsDlg::moveButton(int id, int width, int offsetX) {
  CRect controlRect;
  CWnd* btn = GetDlgItem(id);
  btn->GetWindowRect(&controlRect);
  ScreenToClient(&controlRect);
  btn->MoveWindow(offsetX, controlRect.top, 
    width, controlRect.Height(), TRUE);
}

void ToolbarSettingsDlg::loadData() {
   popupNotification_ = ToolbarSettings::getInstance().readValue(TO_NEWPOPUPNOTIFICATION, true);
   newFriendRequest_  = ToolbarSettings::getInstance().readValue(TO_NEWFRIENDREQUEST, true);
   newMessage_ = ToolbarSettings::getInstance().readValue(TO_NEWMESSAGE, true);
   newPoke_ = ToolbarSettings::getInstance().readValue(TO_NEWPOKE, false);
   newFriend_ = ToolbarSettings::getInstance().readValue(TO_NEWFRIEND, false);
   newEventInvite_ = ToolbarSettings::getInstance().readValue(TO_NEWEVENTINVITE, false);
   newShare_ = ToolbarSettings::getInstance().readValue(TO_NEWSHARE, false);
   smoneWroteWall_ = ToolbarSettings::getInstance().readValue(TO_NEWSMONEWROTEWALL, true);
   afuProfile_ = ToolbarSettings::getInstance().readValue(TO_FRIENDUPDATEDUPROFILE, false);
   afuStatus_ = ToolbarSettings::getInstance().readValue(TO_FRIENDUPDATEDSTATUS, false);
   afuAlbums_ = ToolbarSettings::getInstance().readValue(TO_FRIENDUPDATEDALBUMS, false);
   afuWall_ = ToolbarSettings::getInstance().readValue(TO_FRIENDUPDATEDWALL, false);
   afwNote_ = ToolbarSettings::getInstance().readValue(TO_FRIENDWROTENOTE, false);
   groupInv_ = ToolbarSettings::getInstance().readValue(TO_NEWGROUPINVITE, false);
   checkUpdates_ = ToolbarSettings::getInstance().readValue(TO_CHECKUPDATES, true);
   if (!checkUpdates_) {
     ::ShowWindow(::GetDlgItem(GetSafeHwnd(), IDC_UPDATE_STATUS), SW_HIDE);
   }
   UpdateData(FALSE);
}

void ToolbarSettingsDlg::saveData() {
   UpdateData(TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWPOPUPNOTIFICATION, popupNotification_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWFRIENDREQUEST, newFriendRequest_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWMESSAGE, newMessage_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWPOKE, newPoke_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWFRIEND, newFriend_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWEVENTINVITE, newEventInvite_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWSHARE, newShare_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWSMONEWROTEWALL, smoneWroteWall_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_FRIENDUPDATEDUPROFILE, afuProfile_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_FRIENDUPDATEDSTATUS, afuStatus_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_FRIENDUPDATEDALBUMS, afuAlbums_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_FRIENDUPDATEDWALL, afuWall_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_FRIENDWROTENOTE, afwNote_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_NEWGROUPINVITE, groupInv_ == TRUE);
   ToolbarSettings::getInstance().writeValue(TO_CHECKUPDATES, checkUpdates_ == TRUE);
}

void ToolbarSettingsDlg::loadUpdatesStatus() {
  BitsUtils bits;
  BitsUtils::BitsDownloadStatus status = 
    bits.checkDownloadStatus(kFacebookUpdateJobName);
  switch (status) {
    case BitsUtils::DOWNLOAD_COMPLETED:
      SetDlgItemText(IDC_UPDATE_STATUS, ResourceMessages::getMessage(kUpdateAvailable).c_str());
      break;
   case BitsUtils::DOWNLOAD_IN_PROGRESS:
      SetDlgItemText(IDC_UPDATE_STATUS, ResourceMessages::getMessage(kUpdateInProgress).c_str());
      break;
   default:
      SetDlgItemText(IDC_UPDATE_STATUS, ResourceMessages::getMessage(kNoUpdates).c_str());
      break;
  }
}

// ToolbarSettingsDlg message handlers

void ToolbarSettingsDlg::OnBtnOk() {
   saveData();
   OnOK();
}

BOOL ToolbarSettingsDlg::PreTranslateMessage(MSG* pMsg) {
  //catch Ctrl + Shift + R for special debug settings
  if (pMsg->message == WM_KEYDOWN) {
    if (pMsg->wParam == 'R') { 
      const bool shiftPressed = GetKeyState(VK_SHIFT) < 0;
      const bool ctrlPressed = GetAsyncKeyState(VK_CONTROL) < 0;
      if (shiftPressed && ctrlPressed) {
        UpdateUrlDlg updateUrlDialog;
        updateUrlDialog.DoModal();
      }
    }
  }
  return CDialog::PreTranslateMessage(pMsg);
}

} //!namespace facebook